import {useNavigation} from '@react-navigation/native';
import {Video} from 'expo-av';
import React, {useContext, useEffect, useRef} from 'react';
import {
  View,
  Image,
  Text,
  ActivityIndicator,
  Pressable,
  TouchableOpacity,
} from 'react-native';
import FontAwesome from 'react-native-vector-icons/FontAwesome';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import tw from '../modules/tailwind';
import {EpisodeContext} from '../providers/EpisodeCommentProvider';

const MiniPlayer = () => {
  function renderIcon() {
    if (playbackInstanceInfo.state === 'Buffering') {
      return <ActivityIndicator size={20} color="white" />;
    } else if (playbackInstanceInfo.state === 'Playing') {
      return <FontAwesome name="pause" size={15} color="#fff" />;
    } else if (playbackInstanceInfo.state === 'Paused') {
      return <FontAwesome name="play" size={15} color="#fff" />;
    } else if (playbackInstanceInfo.state === 'Ended') {
      return <MaterialIcons name="replay" size={15} color="#fff" />;
    }
  }
  const playbackInstance = useRef<Video>(null);
  const navigation = useNavigation();

  const {
    miniPlayer,
    setMiniPlayer,
    playData,
    playbackInstanceInfo,
    setPlaybackInstanceInfo,
  } = useContext(EpisodeContext);

  const togglePlay = async () => {
    const shouldPlay = playbackInstanceInfo.state !== 'Playing';
    if (playbackInstance?.current !== null) {
      console.log('playbutton', playbackInstanceInfo.state);
      await playbackInstance?.current.setStatusAsync({
        shouldPlay,
        ...(playbackInstanceInfo.state === 'Ended' && {positionMillis: 0}),
      });
      setPlaybackInstanceInfo({
        ...playbackInstanceInfo,
        state: playbackInstanceInfo.state === 'Playing' ? 'Paused' : 'Playing',
      });
    }
  };

  const updatePlaybackCallback = (status: any) => {
    if (status.isLoaded) {
      setPlaybackInstanceInfo({
        ...playbackInstanceInfo,
        rate: status.rate,
        position: status.positionMillis,
        duration: status.durationMillis || 0,
        state: status.didJustFinish
          ? 'Ended'
          : status.isBuffering
          ? 'Buffering'
          : status.shouldPlay
          ? 'Playing'
          : 'Paused',
      });
    } else {
      if (status.isLoaded === false && status.error) {
        const errorMsg = `Encountered a fatal error during playback: ${status.error}`;
        console.log(errorMsg, 'error');
      }
    }
  };

  console.log('miniPlayer: ', miniPlayer);
  const position = playbackInstanceInfo.position;
  console.log('position: ', position);

  const goPlayer = () => {
    setMiniPlayer(false);
    navigation.navigate('MediaPlayerModalScreen');
  };
  useEffect(() => {
    if (playbackInstance) {
      playbackInstance?.current?.setStatusAsync({
        positionMillis: position,
        shouldPlay: true,
      });
    }
  }, [miniPlayer]);

  return (
    <>
      {miniPlayer === true && (
        <View style={tw`bg-black absolute h-15 w-12/12 bottom-1/14`}>
          <View
            style={tw`px-2 bg-white bg-opacity-10 h-full w-12/12 flex-row justify-between items-center `}>
            <TouchableOpacity
              onPress={() => {
                goPlayer();
              }}>
              <View style={tw` mr-2 flex-row items-center w-8/12`}>
                <Video
                  ref={playbackInstance}
                  source={{uri: playData?.audioUrl}}
                  resizeMode="cover"
                  isLooping
                  onPlaybackStatusUpdate={updatePlaybackCallback}
                />
                <Image
                  style={tw.style('w-12 h-12 rounded-md')}
                  source={{
                    uri: playData?.imgUrl,
                    // "https://i.pinimg.com/originals/d9/7a/ba/d97abaa3ecc0d3aeb48fe80bd0538557.jpg",
                  }}
                />
                <View style={tw`mx-2`}>
                  <Text
                    style={[tw.style('text-white text-sm pr-2')]}
                    ellipsizeMode="tail"
                    numberOfLines={1}>
                    {playData?.title}
                  </Text>
                </View>
              </View>
            </TouchableOpacity>
            <Pressable
              style={tw` bg-white bg-opacity-10  justify-center items-center h-10 w-10 border border-white rounded-full`}
              onPress={
                playbackInstanceInfo.state === 'Buffering' ? null : togglePlay
              }>
              {renderIcon()}
            </Pressable>
          </View>
        </View>
      )}
    </>
  );
};

export default MiniPlayer;
